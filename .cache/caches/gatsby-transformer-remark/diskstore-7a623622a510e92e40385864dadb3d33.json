{"expireTime":9007200857050562000,"key":"transformer-remark-markdown-html-ast-b4faaac0b83224d51da3e8b243006b31-gatsby-remark-reading-timegatsby-remark-highlight-code-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Have you ever heard of the Call Stack? Chances are if you’re a newer JavaScript Developer, you’ve only seen the words “Call Stack“ in reference to an error your code output on your browser. You’ve also probably copied and pasted the error into Google and landed on StackOverFlow with a semi decent answer.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":306,"offset":306}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":306,"offset":306}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Truth be told you truly don’t need to know or understand the Call Stack to be a JavaScript developer. However once you do learn about the Call Stack you’ll be one step closer to becoming an expert level JavaScript developer. But if that’s not a goal of yours, nothing you will read below is absolutely necessary to learn and or understand.","position":{"start":{"line":4,"column":1,"offset":308},"end":{"line":4,"column":340,"offset":647}}}],"position":{"start":{"line":4,"column":1,"offset":308},"end":{"line":4,"column":340,"offset":647}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the simplest analogy possible, the Call stack is a “to do list” for all of the functions in your code. In most cases when you start checking off completed items in your list, you will start from the top down working your way through until you reach the first item you placed on your list. That’s exactly how the Call Stack operates, It’s a data structure that follows the rules of LIFO or Last In First Out. Everything I’ve explained above is very high level, please allow me to go deeper.","position":{"start":{"line":6,"column":1,"offset":649},"end":{"line":6,"column":493,"offset":1141}}}],"position":{"start":{"line":6,"column":1,"offset":649},"end":{"line":6,"column":493,"offset":1141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A good place to start is with the stack frame, which is just a temporary store of the data that is tied to a function, such as the parameters and variables connected to that function. After that function returns, all of the data is erased and it is removed from the Call Stack allowing the next item to resolved. This will continue until every single function in the Call Stack is returned, thus leaving the Call Stack empty.","position":{"start":{"line":8,"column":1,"offset":1143},"end":{"line":8,"column":426,"offset":1568}}}],"position":{"start":{"line":8,"column":1,"offset":1143},"end":{"line":8,"column":426,"offset":1568}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to understand the next part you’ll need to know what Single Threaded means. If you already know what it means, please bear with me a moment. In laymen’s terms Single Threaded means only one thing is able to be ran at a time; JavaScript is Single Threaded and that can come with serious complications with runtime. Not every function is as fast as calling “console.log()”, some of them have a lot of tasks to run internally or they may be making an API call to another server which may have slow response time. If this occurs you will stay on the current stack frame until the function returns. You are officially blocked and your UI experience will begin to degrade until the function returns and moves on the next item in the queue. Now you’re not stuck with having to deal with this, some incredibly talented folks were able to create asynchronous JavaScript (async/await, callbacks, and promises) and move past issues with slower performing functions by scheduling them to return in the future and move on to the next item in the queue; decreasing wait time while increasing performance and keeping the end user happy.","position":{"start":{"line":10,"column":1,"offset":1570},"end":{"line":10,"column":1131,"offset":2700}}}],"position":{"start":{"line":10,"column":1,"offset":1570},"end":{"line":10,"column":1131,"offset":2700}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":11,"column":1,"offset":2701}}}}